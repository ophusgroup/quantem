name: Check PR version
permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
    branches:
      - main

jobs:
  validate-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch (head)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Get PR branch version
        id: pr_version
        run: |
          PR_VERSION=$(uv version --short)
          echo "pr_version=$PR_VERSION" >> $GITHUB_OUTPUT

      - name: Fetch main and get version
        id: main_version
        run: |
          # Stash any changes (if any) to pyproject.toml
          git stash --include-untracked

          # Fetch main without changing the working directory
          git fetch origin main

          # Get version from main branch (pyproject.toml remains unchanged)
          MAIN_VERSION=$(uv version --short)
          echo "main_version=$MAIN_VERSION" >> $GITHUB_OUTPUT

          # Restore any stashed changes (if any)
          git stash pop || echo "No changes to restore"

      - name: Compare versions
        id: version_comparison
        env:
          PR_VERSION: ${{ steps.pr_version.outputs.pr_version }}
          MAIN_VERSION: ${{ steps.main_version.outputs.main_version }}
        run: |
          VERSION_COMPARISON=$(uv run python scripts/compare-python-versions.py "$MAIN_VERSION" "$PR_VERSION")
          echo "version_comparison=$VERSION_COMPARISON" >> $GITHUB_OUTPUT

      - name: Release new branch
        id: release_branch
        env:
          RESULT: ${{ steps.version_comparison.outputs.version_comparison }}
          PR_VERSION: ${{ steps.pr_version.outputs.pr_version }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          echo "bump_pr_required=false" >> $GITHUB_OUTPUT
          echo "action_should_fail=false" >> $GITHUB_OUTPUT

          # Checkout the PR branch to include its changes
          git checkout $HEAD_SHA

          if [[ "$RESULT" -eq 1 ]]; then
            echo "New version is greater â€” creating release branch"
            git checkout -b release/$PR_VERSION
            git push origin release/$PR_VERSION

          elif [[ "$RESULT" -eq 0 ]]; then
            echo "Version matches â€” bumping version and creating new release branch"

            uv version --bump patch
            uv sync
            NEXT_VERSION=$(uv version --short)

            if [[ "$NEXT_VERSION" == "$PR_VERSION" ]]; then
              echo "Version bump had no effect â€” maybe it was already bumped?"
              echo "action_should_fail=true" >> $GITHUB_OUTPUT
              exit 0
            fi

            echo "Bumped version to $NEXT_VERSION"
            git commit -am "Bump version to $NEXT_VERSION"

            git checkout -b release/$NEXT_VERSION
            git push origin release/$NEXT_VERSION

            echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
            echo "bump_pr_required=true" >> $GITHUB_OUTPUT
            echo "action_should_fail=true" >> $GITHUB_OUTPUT

            # Create the pull request using the GitHub CLI
            gh pr create \
              --repo "$REPO" \
              --head "release/$NEXT_VERSION" \
              --base "main" \
              --title "Bump version to $NEXT_VERSION" \
              --body "This PR was automatically created because the submitted version matched the current release.\nIt bumps the patch version and starts a new release process."

            # Comment on PR
            COMMENT="ðŸš§ This pull request cannot be merged because the submitted version (\`$PR_VERSION\`) matches the current version on \`main\`.\n\n"
            COMMENT+="ðŸ”„ A patch bump has been created and submitted as a new pull request:\n"
            COMMENT+="[\`release/$NEXT_VERSION\`](https://github.com/$REPO/pulls?q=is%3Apr+head%3Arelease%2F$NEXT_VERSION)\n\n"
            COMMENT+="Please review and merge as appropriate."
            gh pr comment "$PR_NUMBER" --body "$COMMENT"

          elif [[ "$RESULT" -eq -1 ]]; then
            echo "Error: New version is less than main â€” rejecting."
            echo "action_should_fail=true" >> $GITHUB_OUTPUT
          fi

      - name: Fail original PR
        if: steps.release_branch.outputs.action_should_fail == 'true'
        run: exit 1